// namespace gazebo
// {
//   class JointUpdatePlugin : public ModelPlugin
//   {
//     public: void Load(physics::ModelPtr _parent, sdf::ElementPtr /*_sdf*/)
//     {
//       this->model = _parent;

//         // if (!ros::isInitialized())
//         // {
//         //     int argc = 0;
//         //     char **argv = NULL;
//         //     ros::init(argc, argv, "gazebo_client",
//         //         ros::init_options::NoSigintHandler);
//         // }

//         // // this->rosNode.reset(new ros::NodeHandle("gazebo_client"));
//         // ros::NodeHandle nh;

//         // //Service Node
//         // ros::ServiceServer service = nh.advertiseService("/trytransform", &JointUpdatePlugin::transform, this);
            
//       // this->updateConnection = event::Events::ConnectWorldUpdateBegin(
//       //     std::bind(&JointUpdatePlugin::OnUpdate, this));

//       joint = model->GetJoints();
//     }
    
//     private: physics::Joint_V joint;
//     std_msgs::String msg;  
    
//     // public: void OnUpdate()
//     // {
//       // for (auto &elem: joint){
//       //   msg.data = elem->GetName() + " " + std::to_string(elem->Position());
//       //   topic_pub.publish(msg);        
//     //   }
//     // }
//     private: physics::ModelPtr model;
//     private: event::ConnectionPtr updateConnection;
//   };

//   GZ_REGISTER_MODEL_PLUGIN(JointUpdatePlugin)
// }

// #define PI 3.14159265

// bool transform(question4::JointPosition::Request &req, question4::JointPosition::Response &res){
//   float fir = cos(req.first*PI/180);
//   float sec = sin(req.second*PI/180);
//   float thi = cos(req.third*PI/180);
//   float fou = sin(req.fourth*PI/180);
  
//   this.model->GetJoint("joint1").SetPosition(fir);
//   this.model->GetJoint("joint2").SetPosition(sec);
//   this.model->GetJoint("joint3").SetPosition(thi);
//   this.model->GetJoint("joint4").SetPosition(fou);

//   res.xnew = res.xnew + req.d;
//   return true;
// }











#include "ros/ros.h"
#include "std_msgs/String.h"

int main(int argc, char **argv)
{
  ros::init(argc, argv, "publisher");
  ros::NodeHandle n;

  ros::Publisher topic_pub = n.advertise<std_msgs::String>("modelplugin", 1000);
  ros::Rate loop_rate(10);

  while (ros::ok())
  {
    
    std_msgs::String msg;
    msg.data = "Testing Publisher!";

    topic_pub.publish(msg);
    ros::spinOnce();
    loop_rate.sleep();
  }

  return 0;
}


// #include <memory>

// #include "JointStatePublisher.h"

// using namespace gazebo;

// void JoinStatePublisher::Load(gazebo::physics::ModelPtr _parent, sdf::ElementPtr _sdf)
// {
//     this->model = _parent;
//     this->sdf = _sdf;
//     std::string joint_names;
    
//     physics::Joint_V all_joints_vector = model->GetJoints();

//     for (auto const &j : all_joints_vector)
//     {

//         std::string type = "moving";
//         if (j->GetType() == (j->FIXED_JOINT | j->JOINT))
//         {
//             type = "fixed";
//         }
//         else
//         {
//             this->joints_vector.push_back(j);
//         }
//     }
//     InitializeROSMembers();

//     this->updateConnection = event::Events::ConnectWorldUpdateBegin(std::bind(&JoinStatePublisher::OnUpdate, this));

//     DebugMessage("Plugin is loaded");
// }

// void JoinStatePublisher::OnUpdate()
// {
//     ReadSimJointsData();
// }

// void JoinStatePublisher::InitializeROSMembers()
// {
//     if (!ros::isInitialized())
//     {
//         int argc = 0;
//         char **argv = nullptr;
//         ros::init(argc, argv, "JSP", ros::init_options::NoSigintHandler);
//         // DebugMessage("ROS Node is initialized manually.", WHITE_TXT);
//     }
//     this->rosNode_unique_ptr = std::make_unique<ros::NodeHandle>(this->model->GetName());
//     this->rosPubJointStates = this->rosNode_unique_ptr->advertise<sensor_msgs::JointState>("joint_states", 10, false);
//     this->timer = this->rosNode_unique_ptr->createTimer(ros::Duration(1.0 / 50.), &JoinStatePublisher::timerCallback,
//                                                         this);    // TODO: Change rate later


//     this->msg_joint_state = sensor_msgs::JointState();

//     this->msg_joint_state.position.resize(this->num_joints);

//     this->j_pos.resize(num_joints);

//     for (auto const &j : joints_vector)
//     {
//         this->msg_joint_state.name.push_back(j->GetName());
//     }
// }

// void JoinStatePublisher::timerCallback(const ros::TimerEvent &event)
// {
//     for (int i = 0; i < num_joints; i++)
//     {
//         this->msg_joint_state.position[i] = this->j_pos.at(i);
//     }
//     this->rosPubJointStates.publish(this->msg_joint_state);
// }

// void JoinStatePublisher::ReadSimJointsData()
// {
//     for (int i = 0; i < num_joints; i++)
//     {
//         this->j_pos.at(i) = GetJointPosition(joints_vector.at(i));
//     }
// }

// double JoinStatePublisher::GetJointPosition(const physics::JointPtr joint, const double axis_index)
// {
//   return joint->GetAngle(axis_index).Radian();
// }